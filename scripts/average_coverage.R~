#!/usr/bin/Rscript
options(error=utils::recover)
##
## average_coverage
## Given an input coverage file in circos form, ie:
## Take every chromosome and take the median coverage value per num bases.
# # coverage stats: mean=4748 std dev=313
# chr1    14400   14404   2
# chr1    14404   14406   3
# chr1    14406   14407   8
# chr1    14407   14408   13
# chr1    14408   14409   21
# chr1    14409   14410   39
# chr1    14410   14411   54
# chr1    14411   14412   82
# chr1    14412   14413   101
## 
## Created by Olga Botvinnik on 2012-05-22.
## Copyright (c) 2012 __MyCompanyName__. All rights reserved.
##
## Collaborators: 
## Usage: ./average_coverage.R <arg1> <arg2> <arg3>
## Example run: ./average_coverage.R

# testing:
# coverage = read.delim("genome_coverage_bedtools_first10000.circos", header=FALSE, skip=1)

###### Get initial conditions ######
args = commandArgs(TRUE)
coverageFile = args[1]
interval = as.numeric(args[2])
outFile = args[3]
if( length(args) == 4){
  avgMethod = args[4]
} else{ avgMethod = "median"}
####################################
#print(ls.str())

if(avgMethod == "median"){
	avg = median
} else if ( avgMethod =="mean"){
	avg = mean
} else if (avgMethod =="mode"){
	avg = mode
} else {
	throw("Unrecognized average method:", avgMethod)
}
coverage = read.delim(coverageFile, header=FALSE, skip=1)
print(paste('reading file', coverageFile))
chromosomes = unique(as.character(coverage[,1]))

avgCoverage = NULL

for(chr in chromosomes){
	chrInd = which(coverage[,1] == chr)
	chrMin = min(coverage[chrInd,2])  # take the minimum start site
	chrMax = max(coverage[chrInd,3])  # take the maximum end site
	
	# calculate the number of intervals
	numIntervals = ceiling(chrMax/chrMin)
	thisChrCoverage = data.frame(rep(chr, numIntervals),
		vector(mode="numeric", length=numIntervals),
		vector(mode="numeric", length=numIntervals),
		vector(mode="numeric", length=numIntervals))
	colnames(thisChrCoverage) = NULL
	for(i in 1:numIntervals){
		thisIntervalMin = chrMin + (i-1)*interval
		thisIntervalMax = min(chrMin + i*interval-1, chrMax)
		thisChrCoverage[i,2] = thisIntervalMin
		thisChrCoverage[i,3] = thisIntervalMax		
		thisIntervalInd = which((coverage[,2] > thisIntervalMin) &
								(coverage[,3] < thisIntervalMax))
		thisChrCoverage[i,4] = avg(coverage[thisIntervalInd,4])
	}
	avgCoverage = rbind(avgCoverage, thisChrCoverage)
}
